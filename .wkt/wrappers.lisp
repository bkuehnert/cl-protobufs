;;; wrappers.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl (cl:declaim (cl:optimize (cl:debug 0) (sb-c:store-coverage-data 0)))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")
    (cl:defpackage "CL-PROTOBUFS.GOOGLE.PROTOBUF" (:use))))

(cl:in-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(proto:define-schema 'wrappers
    :syntax :proto3
    :package "google.protobuf"))

;; Top-Level messages.
(proto:define-message double-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type cl:double-float :label (:optional) :typename "double" :json-name "value"
  ))
(proto:define-message float-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type cl:float :label (:optional) :typename "float" :json-name "value"
  ))
(proto:define-message int64-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type proto:int64 :label (:optional) :typename "int64" :json-name "value"
  ))
(proto:define-message u-int64-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type proto:uint64 :label (:optional) :typename "uint64" :json-name "value"
  ))
(proto:define-message int32-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type proto:int32 :label (:optional) :typename "int32" :json-name "value"
  ))
(proto:define-message u-int32-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type proto:uint32 :label (:optional) :typename "uint32" :json-name "value"
  ))
(proto:define-message bool-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type cl:boolean :label (:optional) :typename "bool" :json-name "value"
  ))
(proto:define-message string-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "value"
  ))
(proto:define-message bytes-value
    (:conc-name "")
  ;; Fields.
  (value  :index 1  :type proto:byte-vector :label (:optional) :typename "bytes" :json-name "value"
  ))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(cl:setf (cl:gethash #P"wrappers.proto" proto-impl::*all-schemas*)
         (proto:find-schema 'wrappers)))

(cl:export '(wrappers
             double-value
             value
             float-value
             value
             int64-value
             value
             u-int64-value
             value
             int32-value
             value
             u-int32-value
             value
             bool-value
             value
             string-value
             value
             bytes-value
             value))
