;;; api.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl (cl:declaim (cl:optimize (cl:debug 0) (sb-c:store-coverage-data 0)))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")
    (cl:defpackage "CL-PROTOBUFS.GOOGLE.PROTOBUF" (:use))))

(cl:in-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(proto:define-schema 'api
    :syntax :proto3
    :package "google.protobuf"
     :import '("source_context.proto"
              "type.proto")))

;; Top-Level messages.
(proto:define-message api
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (methods  :index 2  :type (proto:list-of method) :label (:repeated :list) :typename "Method" :json-name "methods"
  )
  (options  :index 3  :type (proto:list-of cl-protobufs.google.protobuf::option) :label (:repeated :list) :typename "google.protobuf.Option" :json-name "options"
  )
  (version  :index 4  :type cl:string :label (:optional) :typename "string" :json-name "version"
  )
  (source-context  :index 5  :type (cl:or cl:null cl-protobufs.google.protobuf::source-context) :label (:optional) :typename "google.protobuf.SourceContext" :json-name "sourceContext"
  )
  (mixins  :index 6  :type (proto:list-of mixin) :label (:repeated :list) :typename "Mixin" :json-name "mixins"
  )
  (syntax  :index 7  :type cl-protobufs.google.protobuf::syntax :label (:optional) :typename "google.protobuf.Syntax" :json-name "syntax"
  ))
(proto:define-message method
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (request-type-url  :index 2  :type cl:string :label (:optional) :typename "string" :json-name "requestTypeUrl"
  )
  (request-streaming  :index 3  :type cl:boolean :label (:optional) :typename "bool" :json-name "requestStreaming"
  )
  (response-type-url  :index 4  :type cl:string :label (:optional) :typename "string" :json-name "responseTypeUrl"
  )
  (response-streaming  :index 5  :type cl:boolean :label (:optional) :typename "bool" :json-name "responseStreaming"
  )
  (options  :index 6  :type (proto:list-of cl-protobufs.google.protobuf::option) :label (:repeated :list) :typename "google.protobuf.Option" :json-name "options"
  )
  (syntax  :index 7  :type cl-protobufs.google.protobuf::syntax :label (:optional) :typename "google.protobuf.Syntax" :json-name "syntax"
  ))
(proto:define-message mixin
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (root  :index 2  :type cl:string :label (:optional) :typename "string" :json-name "root"
  ))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(cl:setf (cl:gethash #P"api.proto" proto-impl::*all-schemas*)
         (proto:find-schema 'api)))

(cl:export '(api
             api
             name
             methods
             options
             version
             source-context
             mixins
             syntax
             method
             name
             request-type-url
             request-streaming
             response-type-url
             response-streaming
             options
             syntax
             mixin
             name
             root))
