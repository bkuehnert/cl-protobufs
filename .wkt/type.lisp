;;; type.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl (cl:declaim (cl:optimize (cl:debug 0) (sb-c:store-coverage-data 0)))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")
    (cl:defpackage "CL-PROTOBUFS.GOOGLE.PROTOBUF" (:use))))

(cl:in-package "CL-PROTOBUFS.GOOGLE.PROTOBUF")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(proto:define-schema 'type
    :syntax :proto3
    :package "google.protobuf"
     :import '("any.proto"
              "source_context.proto")))

;; Top-Level enums.
(proto:define-enum syntax
    ()
  (syntax-proto2 :index 0)
  (syntax-proto3 :index 1))
;; Top-Level messages.
(proto:define-message type
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (fields  :index 2  :type (proto:list-of field) :label (:repeated :list) :typename "Field" :json-name "fields"
  )
  (oneofs  :index 3  :type (proto:list-of cl:string) :label (:repeated :list) :typename "string" :json-name "oneofs"
  )
  (options  :index 4  :type (proto:list-of option) :label (:repeated :list) :typename "Option" :json-name "options"
  )
  (source-context  :index 5  :type (cl:or cl:null cl-protobufs.google.protobuf::source-context) :label (:optional) :typename "google.protobuf.SourceContext" :json-name "sourceContext"
  )
  (syntax  :index 6  :type syntax :label (:optional) :typename "Syntax" :json-name "syntax"
  ))
(proto:define-message field
    (:conc-name "")
  ;; Nested enums.
  (proto:define-enum field.kind
      ()
    (type-unknown :index 0)
    (type-double :index 1)
    (type-float :index 2)
    (type-int64 :index 3)
    (type-uint64 :index 4)
    (type-int32 :index 5)
    (type-fixed64 :index 6)
    (type-fixed32 :index 7)
    (type-bool :index 8)
    (type-string :index 9)
    (type-group :index 10)
    (type-message :index 11)
    (type-bytes :index 12)
    (type-uint32 :index 13)
    (type-enum :index 14)
    (type-sfixed32 :index 15)
    (type-sfixed64 :index 16)
    (type-sint32 :index 17)
    (type-sint64 :index 18))
  (proto:define-enum field.cardinality
      ()
    (cardinality-unknown :index 0)
    (cardinality-optional :index 1)
    (cardinality-required :index 2)
    (cardinality-repeated :index 3))
  ;; Fields.
  (kind  :index 1  :type field.kind :label (:optional) :typename "Kind" :json-name "kind"
  )
  (cardinality  :index 2  :type field.cardinality :label (:optional) :typename "Cardinality" :json-name "cardinality"
  )
  (number  :index 3  :type proto:int32 :label (:optional) :typename "int32" :json-name "number"
  )
  (name  :index 4  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (type-url  :index 6  :type cl:string :label (:optional) :typename "string" :json-name "typeUrl"
  )
  (oneof-index  :index 7  :type proto:int32 :label (:optional) :typename "int32" :json-name "oneofIndex"
  )
  (packed  :index 8  :type cl:boolean :label (:optional) :typename "bool" :json-name "packed"
  )
  (options  :index 9  :type (proto:list-of option) :label (:repeated :list) :typename "Option" :json-name "options"
  )
  (json-name  :index 10  :type cl:string :label (:optional) :typename "string" :json-name "jsonName"
  )
  (default-value  :index 11  :type cl:string :label (:optional) :typename "string" :json-name "defaultValue"
  ))
(proto:define-message enum
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (enumvalue  :index 2  :type (proto:list-of enum-value) :label (:repeated :list) :typename "EnumValue" :json-name "enumvalue"
  )
  (options  :index 3  :type (proto:list-of option) :label (:repeated :list) :typename "Option" :json-name "options"
  )
  (source-context  :index 4  :type (cl:or cl:null cl-protobufs.google.protobuf::source-context) :label (:optional) :typename "google.protobuf.SourceContext" :json-name "sourceContext"
  )
  (syntax  :index 5  :type syntax :label (:optional) :typename "Syntax" :json-name "syntax"
  ))
(proto:define-message enum-value
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (number  :index 2  :type proto:int32 :label (:optional) :typename "int32" :json-name "number"
  )
  (options  :index 3  :type (proto:list-of option) :label (:repeated :list) :typename "Option" :json-name "options"
  ))
(proto:define-message option
    (:conc-name "")
  ;; Fields.
  (name  :index 1  :type cl:string :label (:optional) :typename "string" :json-name "name"
  )
  (value  :index 2  :type (cl:or cl:null cl-protobufs.google.protobuf::any) :label (:optional) :typename "google.protobuf.Any" :json-name "value"
  ))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(cl:setf (cl:gethash #P"type.proto" proto-impl::*all-schemas*)
         (proto:find-schema 'type)))

(cl:export '(type
             syntax
             syntax->numeral
             numeral->syntax
             type
             name
             fields
             oneofs
             options
             source-context
             syntax
             field.kind
             field.kind->numeral
             numeral->field.kind
             field.cardinality
             field.cardinality->numeral
             numeral->field.cardinality
             field
             kind
             cardinality
             number
             name
             type-url
             oneof-index
             packed
             options
             json-name
             default-value
             enum
             name
             enumvalue
             options
             source-context
             syntax
             enum-value
             name
             number
             options
             option
             name
             value))
